## Работа 4. Детектирование границ документов на кадрах видео
Автор: Богданов А.А. <br>
Дата: @time_stemp@

### Задание
1. Самостоятельно снимаем видео смартфоном
- объект съемки - купюры (рубли разного номинала), расправленные и лежащие на поверхности (проективно искаженны прямоугольник)
- количество роликов - от 5 шт.
- длительность - 5-7 сек
- условия съемки разные
2. Извлекаем по 3 кадра из каждого ролика (делим кол-во кадров на 5 и берем каждый с индексом 2/5,3/5,4/5)
3. Цветоредуцируем изображения
4. Бинаризуем изображения
5. Морфологически обрабатываем изображения
6. Выделяем основную компоненту связности
7. Руками изготавливаем маски (идеальная зона купюры)
8. Оцениваем качество выделения зоны и анализируем ошибки

### Результаты
В ходе считывания видео были записаны следующие кадры (рис.1):<br>

![](./output/frame14.png)
![](./output/frame19.png)
![](./output/frame3.png)
Рис. 1. Исходные изображения. <br><br>

Затем было применено цветоредуцирование (рис. 2):<br>

![](./output/grayscale_frame14.png)
![](./output/grayscale_frame19.png)
![](./output/grayscale_frame3.png)
Рис. 2. Цветоредуцированные изображения. <br><br>

Далее цветоредуцированные изображения бинаризуются при помощи метода Оцу (рис. 3):<br> 

![](./output/bin_frame14.png)
![](./output/bin_frame19.png)
![](./output/bin_frame3.png)
Рис. 3. Бинаризированные изображения. <br><br>

Затем над бинаризированными изображения проводятся морфологические преобразования, 
происходит очерчение более четких границ и удаление "шумов" (рис. 4):<br>

![](./output/morph_frame14.png)
![](./output/morph_frame19.png)
![](./output/morph_frame3.png)
Рис. 4. Изображения после морфологической обработки. <br><br>

Далее для получения маски происходит нахождение наибольшей по площади компоненты связности, 
а остальные компоненты связности закрашиваются в черный (рис. 5):<br>

![](./output/improved_morph14.png)
![](./output/improved_morph19.png)
![](./output/improved_morph3.png)
Рис. 5. Программно полученные маски. <br><br>

Для проверки качества полученных масок вручную задаются эталонные маски (рис. 6):<br>

![](./output/mask14.png)
![](./output/mask19.png)
![](./output/mask3.png)
Рис. 6. Эталонные маски. <br><br>

Для визуализации отличий масок используется наложение их на исходные кадры в разных цветовых каналах (рис. 7):<br>
- Красный - программная маска
- Зеленый - эталонная маска
- Желтый - пересечение масок

![](./output/conc_frame14.png)
![](./output/conc_frame19.png)
![](./output/conc_frame3.png)
Рис. 7. Визуализация отличий. <br>

При сравнении масок можно заметить, что маски купюр в первых двух случаях определены довольно точно, 
чего нельзя сказать о третьем. Из-за засвета в левом нижнем углу маска вычислилась неточно.

### Точность программных масок
Точностью программной маски относительно эталонной будем считать отношение пересечения пикселей
масок на их объединение. Полученная оценка показывает коэффициент соответствия от 0 до 1, 
причем, чем ближе к 1, тем идентичнее маски.

Ниже приведены точности для 21 изображения (по 3 кадра из 7 видео). Изображения из отчета - это картинки под номером 14 19 и 3 соответственно.

Название файла | Точность
---------------|---------
frame1.png     |0.657676
frame2.png     |0.5992
frame3.png     |0.731466
frame4.png     |0.3992
frame5.png     |0.650136
frame6.png     |0.567802
frame7.png     |0.441232
frame8.png     |0.404791
frame9.png     |0.4503
frame10.png    |0.806054
frame11.png    |0.81186
frame12.png    |0.814829
frame13.png    |0.955682
frame14.png    |0.958126
frame15.png    |0.9535
frame16.png    |0.921262
frame17.png    |0.928383
frame18.png    |0.910459
frame19.png    |0.907504
frame20.png    |0.902741
frame21.png    |0.902637


Точность получилась неидеальная, но если купюра расположена не на светлом фоне, то маска определяется почти безошибочно.

### Текст программы

```cpp
@cpp_source@
```
